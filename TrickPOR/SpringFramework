@Controller-soring MVC, marks class as controller
@GetMapping-Getrequest - function to handle 
@AuthenticationPrincipal-stores the user information on login.
Model-To pass data to thymeleaf, model attribute.

@RequestMapping-more flexible than getapping,postmapping.
@CrossOrigin-to allow/block IP addrees form which requests are allowed.
@Autowired-for dependency injection.
@Value-Value from propertiy file in code.

@OneToMany defines a one-to-many relationship between 2 entities.
@JoinColumn indicates the entity is the owner of the relationship: the corresponding table has a column with a foreign key to the referenced table.

@OneToMany(cascade = CascadeType.ALL)
@JoinColumn(name = "pc_fid", referencedColumnName = "id")
List < Comment > comments = new ArrayList < > ();


One to One relationship.

import javax.persistence.*;
import lombok.Data;

@Entity
@Data
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String username;

    @OneToOne(cascade = CascadeType.ALL)
    @JoinColumn(name = "profile_id", referencedColumnName = "id")// Adds a foreign key column in User table
    private Profile profile;
}


import javax.persistence.*;
import lombok.Data;

@Entity
@Data
public class Profile {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String bio;
}

In the example above it is unidirectional one-to-one relationship.

import javax.persistence.*;
import lombok.Data;

@Entity
@Data
public class Profile {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String bio;

    @OneToOne(mappedBy = "profile")
    private User user;
}

If profile class knows about user it is assosociated with ,then it is bi-directional relationship.

The @JoinColumn(name = "profile_id", referencedColumnName = "id") 
annotation specifies that the profile_id column in the User table will reference the id column in the Profile table. 
This column is used to link the User to its corresponding Profile

the entity in which mapped by attribute is there is inverse side,other side is owner side.
eg.The Profile table does not contain a foreign key column referencing User. Instead, the relationship is managed by the User table

Bidirectional relationships are often preferred in practical scenarios because they provide more flexibility and ensure consistency.


One to Many relationship

In a Many-to-One relationship, the owning side is usually defined on the many side of the relationship. 
It’s usually the side that owns the foreign key.
The @JoinColumn annotation defines that actual physical mapping on the owning side:

@Entity
public class Email {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long id;

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "employee_id")
    private Employee employee;

    // ...

}

It simply means that our Email entity will have a foreign key column named employee_id referring to the primary attribute id of our Employee entity.

To make this association bidirectional, all we’ll have to do is to define the referencing side. The inverse or the referencing side simply maps to the owning side.

We can easily use the mappedBy attribute of @OneToMany annotation to do so.

@Entity
public class Employee {

    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long id;

    @OneToMany(fetch = FetchType.LAZY, mappedBy = "employee")
    private List<Email> emails;
    
    // ...
}
Here, the value of mappedBy is the name of the association-mapping attribute on the owning side.
 With this, we have now established a bidirectional association between our Employee and Email entities.
 mappedBy property is what we use to tell Hibernate which variable we are using to represent the parent class in our child class.

The owning side of the relation tracked by Hibernate is the side of the relation that owns the foreign key in the database

Many to Many
The owner side is where we configure the relationship.
in mappedBy use name of field in java class 
